# %% Imports
from sklearn.model_selection import train_test_split
from pyfume.Clustering import Clusterer
from pyfume.EstimateAntecendentSet import AntecedentEstimator
from pyfume.EstimateConsequentParameters import ConsequentEstimator
from pyfume.SimpfulModelBuilder import SugenoFISBuilder
from pyfume.Tester import SugenoFISTester
from pyfume import DataLoader
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, cohen_kappa_score
from numpy import clip, column_stack, argmax
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
from pyfume import DataSplitter
# %% Load dataset and create train-test sets
data = pd.read_csv(r"C:\Users\manue\Downloads\first_assignment\data\wbco.csv",header=None)
data.replace('?', np.nan, inplace=True)
data.dropna(inplace=True)
X = data.iloc[:, :-1].to_numpy()  
y = data.iloc[:, -1].to_numpy()   # The last column is the target
num_features = data.shape[1] - 1 
var_names = [f'Feature_{i}' for i in range(num_features)]  # Creating Feature 1, Feature 2, etc.
target_name = 'Target'  # Name the target column

# Assign the new column names to the dataframe
data.columns = var_names + [target_name]

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)  # This transforms X to the range [0, 1]

# Convert the scaled features back to a DataFrame for easier handling
X_scaled = pd.DataFrame(X_scaled, columns=var_names)
X_scaled=X_scaled.to_numpy()

print(data)
print(X_scaled)
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# %% Cluster the input-output space
cl = Clusterer(x_train=X_train, y_train=y_train, nr_clus=10)
clust_centers, part_matrix, _ = cl.cluster(method='fcm')

# %% Estimate membership functions parameters
ae = AntecedentEstimator(X_train, part_matrix)
antecedent_params = ae.determineMF()

# %% Estimate consequent parameters
ce = ConsequentEstimator(X_train, y_train, part_matrix)
conseq_params = ce.suglms()

# %% Build first-order Takagi-Sugeno model
modbuilder = SugenoFISBuilder(antecedent_params, conseq_params, var_names, save_simpful_code=False)
model = modbuilder.get_model()

# %% Get model predictions
modtester = SugenoFISTester(model, X_test, var_names)
# Get predictions (assuming they are class labels)
predictions = modtester.predict()
#print(modtester.predict()[0])
y_pred_probs = clip(modtester.predict()[0], 0, 1)
y_pred_probs = column_stack((1 - y_pred_probs, y_pred_probs))
y_pred = argmax(y_pred_probs,axis=1)

# %% Compute classification metrics
acc_score = accuracy_score(y_test, y_pred)
print("Accuracy: {:.3f}".format(acc_score))
rec_score = recall_score(y_test, y_pred)
print("Recall: {:.3f}".format(rec_score))
prec_score = precision_score(y_test, y_pred)
print("Precision Score: {:.3f}".format(prec_score))
F1_score = f1_score(y_test, y_pred)
print("F1-Score: {:.3f}".format(F1_score))
kappa = cohen_kappa_score(y_test, y_pred)
print("Kappa Score: {:.3f}".format(kappa))
